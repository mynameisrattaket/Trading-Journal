'use client';

import React, { useState, useEffect } from 'react';

const InvestmentTree = () => {
  const [treeHeight, setTreeHeight] = useState(0.5); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á 0.5 ‡πÄ‡∏°‡∏ï‡∏£
  const [treeStage, setTreeStage] = useState('üå±'); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≤
  const [growthRate, setGrowthRate] = useState(0.05); // ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const [waterLevel, setWaterLevel] = useState(100); // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 100%
  const [message, setMessage] = useState(''); // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢
  const [maxHeightReached, setMaxHeightReached] = useState(false); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡πÄ‡∏°‡∏ï‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
  const waterTree = () => {
    if (waterLevel < 100) {
      setWaterLevel(100);
      setGrowthRate(growthRate + 0.05); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏î‡∏ô‡πâ‡∏≥
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Home
  const goToHome = () => {
    window.location.href = '/'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Home
  };

  // ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  useEffect(() => {
    const interval = setInterval(() => {
      if (waterLevel <= 0) {
        setTreeStage('ü™µ'); // ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≠‡πÑ‡∏°‡πâ
        setGrowthRate(0); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
        setMessage('Your tree died because you didn\'t water it!'); // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢
      } else {
        if (treeHeight < 10) {
          setTreeHeight((prev) => prev + growthRate); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
        } else {
          setMaxHeightReached(true); // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ñ‡∏∂‡∏á 10 ‡πÄ‡∏°‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß
        }
        setWaterLevel((prev) => Math.max(prev - 2, 0)); // ‡∏•‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏•‡∏á‡∏ó‡∏∏‡∏Å‡πÜ ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      }
    }, 1000);

    // ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
    if (treeHeight >= 10) {
      setTreeStage('üå≥'); // ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏±‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏ñ‡∏∂‡∏á 10 ‡πÄ‡∏°‡∏ï‡∏£
    } else if (treeHeight >= 3) {
      setTreeStage('üåø'); // ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡∏ñ‡∏∂‡∏á 3 ‡πÄ‡∏°‡∏ï‡∏£
    } else if (treeHeight >= 1.5) {
      setTreeStage('üå±'); // ‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≤
    }

    return () => clearInterval(interval);
  }, [growthRate, waterLevel, treeHeight]);

  return (
    <div style={{ textAlign: 'center', paddingTop: '50px', backgroundColor: '#e6f7ff', height: '100vh', fontFamily: 'Arial, sans-serif' }}>
      {/* ‡∏õ‡∏∏‡πà‡∏° Home */}
      <button 
        onClick={goToHome} 
        style={{
          position: 'absolute',
          top: '20px',
          left: '20px',
          padding: '15px 30px',
          fontSize: '1.2em',
          backgroundColor: '#FF5733',
          color: 'white',
          borderRadius: '10px',
          border: 'none',
          cursor: 'pointer',
          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
          transition: 'background-color 0.3s ease, transform 0.3s ease',
        }}
        onMouseEnter={(e) => e.target.style.backgroundColor = '#FF4500'}
        onMouseLeave={(e) => e.target.style.backgroundColor = '#FF5733'}
        onMouseDown={(e) => e.target.style.transform = 'scale(0.95)'}
        onMouseUp={(e) => e.target.style.transform = 'scale(1)'}
      >
        üè† Home
      </button>
      
      <h1 style={{
        fontSize: '3em', 
        marginBottom: '20px', 
        color: '#2c6f2f', 
        textShadow: '4px 4px 6px rgba(0, 0, 0, 0.2)', 
        transition: 'font-size 0.5s ease-in-out'
      }}>üå± Grow Your Tree üå≥</h1>
      
      <p style={{
        fontSize: '1.6em', 
        fontWeight: 'bold', 
        color: '#333', 
        transition: 'color 0.3s ease'
      }}>
        Tree Height: {treeHeight.toFixed(2)}m
      </p>
      
      <p style={{
        fontSize: '1.3em', 
        color: waterLevel < 20 ? 'red' : 'black', 
        fontWeight: 'bold',
        transition: 'color 0.3s ease, font-size 0.3s ease'
      }}>
        Water Level: {waterLevel}% 
      </p>

      {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢ */}
      {message && <p style={{ color: 'red', fontSize: '1.5em', fontWeight: 'bold' }}>{message}</p>}
      {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà */}
      {maxHeightReached && <p style={{ color: 'green', fontSize: '1.5em', fontWeight: 'bold' }}>Your tree has reached its maximum height of 10 meters!</p>}

      <div>
        <button 
          onClick={waterTree} 
          style={{
            margin: '15px', 
            padding: '20px', 
            fontSize: '1.3em', 
            backgroundColor: '#2196F3', 
            color: 'white', 
            borderRadius: '15px', 
            cursor: 'pointer', 
            transition: 'background-color 0.3s ease, transform 0.3s ease',
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
          }}
          onMouseEnter={(e) => e.target.style.backgroundColor = '#1e88e5'}
          onMouseLeave={(e) => e.target.style.backgroundColor = '#2196F3'}
          onMouseDown={(e) => e.target.style.transform = 'scale(0.95)'}
          onMouseUp={(e) => e.target.style.transform = 'scale(1)'}
        >
          üí¶ Water the Tree
        </button>
      </div>

      <div style={{
        fontSize: `${7 + treeHeight}em`, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
        marginTop: '20px', 
        transition: 'font-size 0.5s ease', 
        transform: `scale(${treeHeight / 10})`, 
        animation: 'treeGrowth 2s ease-out'
      }}>
        {treeStage}
      </div>
      
      <p style={{
        fontSize: '1.4em', 
        marginTop: '20px', 
        color: '#333', 
        transition: 'color 0.3s ease'
      }}>Click to water your tree! üå≥üí¶</p>
      
      <style>{`
        @keyframes treeGrowth {
          0% { opacity: 0; transform: scale(0); }
          100% { opacity: 1; transform: scale(1); }
        }
      `}</style>
    </div>
  );
};

export default InvestmentTree;
